#!/bin/bash
# -*- mode: sh -*-
# vi: set ft=sh :

if [[ $1 == "--help" ]] || [[ $1 == "-h" ]]; then

    echo "usage: $(basename $0) {create,activate,destroy}"
    echo "Create a python virtual environment using the currently active python"
    exit 0

fi


# create [VIRTUAL-ENV-NAME] -> create a virtual environment
function create() {

    if [ "$#" -eq 0 ]; then
        echo "no VIRTUAL-ENV-NAME specified"
        return 1
    fi

    env=$1

    if python --version | grep "Python 3." > /dev/null 2>&1; then
        # https://stackoverflow.com/a/30233408/5006
        python -m venv ${@:2} "$env"
    else
        virtualenv ${@:2} "$env"
    fi

    echo "Created virtual environment: $env"


    # create an evironment shell file that custom config can be added to
    environ_f=".env"
    if [[ ! -f "$environ_f" ]]; then
        if [[ -n "$PYVENV_ENVIRON_FILE" ]]; then
            cp "$PYVENV_ENVIRON_FILE" "$environ_f"
            echo "Copied environ file: $environ_f from $PYVENV_ENVIRON_FILE"
        else
            touch "$environ_f"
            echo "Created blank environ file: $environ_f"
        fi
    fi


    # create a usercustomize python file to customize the python installation
    site_f="$env/sitecustomize.py"
    if [[ -f "$PYVENV_CUSTOMIZE_FILE" ]]; then
        cp "$PYVENV_CUSTOMIZE_FILE" "$env/sitecustomize.py"
        echo "Copied site customize file: $site_f from $PYVENV_CUSTOMIZE_FILE"
    else
        touch "$env/sitecustomize.py"
        echo "Created blank site customize file: $site_f"
    fi

    # we map our custom sitecustomize.py.py file to the sitecustomize so it gets run when
    # our virtualenv python gets run, this is really just for convenience
    py_d=$(find "$env/lib" -type d -name "python*")
    #cp "$PYENV_CUSTOMIZE_FILE" "$py_d/sitecustomize.py"
    $(pushd "$py_d"; ln -s ../../sitecustomize.py sitecustomize.py; popd) &>/dev/null

}


# activate [VIRTUAL-ENV-NAME] -> activate a virtual environment
function activate() {

  fp=$(find . -type f -ipath "*$1/bin/activate")
  #source "$fp"
  . "$fp"

  environ_f=".env"
  if [[ -f "$environ_f" ]]; then
    . "$environ_f"
    echo "Sourced environ file: $environ_f"
  fi

  req_f="requirements.txt"
  if [[ -f "$req_f" ]]; then
    pip install -r "$req_f"
    echo "Installed dependencies in file: $req_f"
  fi

}


#? pydone -> de-activate a virtual environment
function deactivate() {
  deactivate
}
alias done=deactivate
alias kill=deactivate
alias clear=deactivate


# http://docs.python-guide.org/en/latest/dev/virtualenvs/
#? pyvenv [VIRTUAL-ENV-NAME] -> create a virtual environment in current directory
function main() {

    # we want to fail on any command failing in the script
    # http://stackoverflow.com/questions/821396/aborting-a-shell-script-if-any-command-returns-a-non-zero-value
    #set -e
    set -o pipefail
    #set -x

    search=".venv"
    if [ "$#" -gt 0 ]; then
        search=$1
    fi

    # SEARCH FORWARD - search for the virtual env name forwards first
    env=$(find . -type d -iname "$search" | head -n 1 | xargs basename)

    # SEARCH BACKWARD - if we don't find the environment moving forward then move backwards
    if [[ ! -d $env ]]; then
        path=$PWD
        while [[ $path != "/" ]]; do
            env=$(find "$path" -type d -maxdepth 1 -iname "$search" | head -n 1 | xargs basename)
          if [[ -d "$env" ]]; then
            break
          fi
          path=$(dirname "$path")
        done
    fi

    # We didn't find a current environment so let's set it to the default
    if [[ -z "$env" ]]; then
        env=$search
    fi

    echo "Using $env as the virtual environment name"

    if [[ ! -d "$env" ]]; then
        create $env ${@:2}
        created_env=1
    fi

    activate $env

#    if [[ -n "$created_env" ]]; then
##        if [[ -n "$PYVENV_REQUIREMENTS_FILE" ]]; then
##            # we upgrade pip because https://github.com/pyca/cryptography/issues/2692
##            #pip -q install --upgrade pip
##            pip -q install -r "$PYVENV_REQUIREMENTS_FILE"
##        fi
#
#        # this is for installing dependencies from the setup.py file, since I've moved
#        # to just including my development repos in my path this could cause problems
##        if python --version | grep "Python 3." > /dev/null 2>&1; then
##            # https://stackoverflow.com/a/52701117/5006
##            if [[ -f setup.py ]]; then
##                pymodules=$(python -c "import distutils.core; print('\n'.join(distutils.core.run_setup('setup.py').install_requires))")
##                for f in $pymodules; do
##                    pip install "$f"
##                done
##            fi
##        fi
#
#    fi

    #set +x
    #set +e
    set +o pipefail

}






if [[ $# -eq 0 ]]; then
    com="main"
else
    com=$1
fi

# https://stackoverflow.com/a/9057392/5006
$com "${@:2}"
bash


