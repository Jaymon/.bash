#!/bin/bash
# -*- mode: sh -*-
# vi: set ft=sh :
###############################################################################
# version
#
#? version -> return version information
#
###############################################################################


#alias version='cat /etc/lsb-release'
function print_version() {
    if [ $(is_os Darwin) -eq 0 ]; then
        # http://apple.wikia.com/wiki/List_of_Mac_OS_versions
        # http://unix.stackexchange.com/questions/234104/get-osx-codename-from-command-line
        license='/System/Library/CoreServices/Setup Assistant.app/Contents/Resources/en.lproj/OSXSoftwareLicense.rtf'
        os_name=$(grep -oE 'SOFTWARE LICENSE AGREEMENT FOR OS X.*[A-Z]' "$license" | sed "s/SOFT.*OS X //")
        if [[ -z $os_name ]]; then
            os_name=$(grep -oE 'SOFTWARE LICENSE AGREEMENT FOR macOS.*[a-zA-Z]+' "$license" | cut -d' ' -f6)
        fi

        echo -e "CodeName:\t$os_name"
        # https://www.cyberciti.biz/faq/mac-osx-find-tell-operating-system-version-from-bash-prompt/find-os-x-version-from-the-command-line/
        sw_vers
        echo -e "KernalName:\t$(uname -a)"
        echo ""
        # https://superuser.com/a/75206/164279
        system_profiler SPSoftwareDataType
        echo ""
        echo "Type system_profiler for even more information"

    else

        # https://unix.stackexchange.com/a/6348/118750

        if [ -f /etc/os-release ]; then

            # freedesktop.org and systemd
            cat /etc/os-release

        elif type lsb_release >/dev/null 2>&1; then

            # linuxbase.org
            os=$(lsb_release -si)
            ver=$(lsb_release -sr)
            echo "OS: $os"
            echo "Version: $ver"

        elif [ -f /etc/lsb-release ]; then

            # For some versions of Debian/Ubuntu without lsb_release command
            cat /etc/lsb-release

        elif [ -f /etc/debian_version ]; then

            # Older Debian/Ubuntu/etc.
            cat /etc/debian_version

        elif [ -f /etc/SuSe-release ]; then

            # Older SuSE/etc.
            cat /etc/SuSe-release

        elif [ -f /etc/redhat-release ]; then

            # Older Red Hat, CentOS, etc.
            cat /etc/redhat-release

        else

            # Fall back to uname, e.g. "Linux <version>", also works for BSD, etc.
            os=$(uname -s)
            ver=$(uname -r)
            echo "OS: $os"
            echo "Version: $ver"

        fi

#    info=$(cat /etc/lsb-release)
#    is_ubuntu=$(echo $info | grep -i ubuntu &>/dev/null; echo $?)
#
#    if [[ $is_ubuntu -eq 0 ]]; then
#      # http://en.wikipedia.org/wiki/List_of_Ubuntu_releases
#      # http://stackoverflow.com/questions/1494178/how-to-define-hash-tables-in-bash
#      declare -A ubuntus=( ["14.10"]="Utopic Unicorn", ["14.04"]="Trusty Tahr", "13.10"]="Saucy Salamander", ["13.04"]="Raring Ringtail", ["12.10"]="Quantal Quetzal", ["12.04"]="Precise Pangolin", ["11.10"]="Oneiric Ocelot", ["11.04"]="Natty narwhal", ["10.10"]="Maverick Meerkat", ["10.04"]="Lucid Lynx" )
#      for key in ${!ubuntus[@]}; do
#        if [[ $(echo $info | grep "$key" &>/dev/null; echo $?) -eq 0 ]]; then
#          echo ${ubuntus[$key]}
#          break
#        fi
#
#      done
#
#    fi
#
#    echo "$info"
    fi
}


if [[ $1 == "--help" ]] || [[ $1 == "-h" ]]; then

    echo "usage: $(basename $0)"
    echo ""
    echo "print the OS version"
    echo ""
    exit 0

else

    print_version

fi

